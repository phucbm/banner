{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {readFileSync} from 'fs';\n\ninterface PackageJson {\n    name: string;\n    version: string;\n    homepage?: string;\n    license?: string;\n    author?: {\n        name: string;\n        url?: string;\n    };\n}\n\n/**\n * Reads package.json and generates a banner string\n * @param input - Either a path to package.json file or a package.json object\n * @returns Banner string formatted for JavaScript files\n */\nexport function generateBanner(input: string | PackageJson = './package.json'): string {\n    try {\n        let pkg: PackageJson;\n\n        if (typeof input === 'string') {\n            // Read from file path\n            const packageJsonContent = readFileSync(input, 'utf-8');\n            pkg = JSON.parse(packageJsonContent);\n        } else {\n            // Use provided object\n            pkg = input;\n        }\n\n        const banner = `/*!\n * ${pkg.name} ${pkg.version}\n * ${pkg.homepage || ''}\n *${pkg.license ? `\\n * @license ${pkg.license}` : ''}${pkg.author?.name ? `\\n * @author: ${pkg.author.name}${pkg.author.url ? `, ${pkg.author.url}` : ''}` : ''}\n */`;\n\n        return banner;\n    } catch (error) {\n        throw new Error(`Failed to generate banner: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}"],"mappings":";;;;;;;;AAAA,SAAQ,oBAAmB;AAkBpB,SAAS,eAAe,QAA8B,kBAA0B;AACnF,MAAI;AACA,QAAI;AAEJ,QAAI,OAAO,UAAU,UAAU;AAE3B,YAAM,qBAAqB,aAAa,OAAO,OAAO;AACtD,YAAM,KAAK,MAAM,kBAAkB;AAAA,IACvC,OAAO;AAEH,YAAM;AAAA,IACV;AAEA,UAAM,SAAS;AAAA,KAClB,IAAI,IAAI,IAAI,IAAI,OAAO;AAAA,KACvB,IAAI,YAAY,EAAE;AAAA,IACnB,IAAI,UAAU;AAAA,cAAiB,IAAI,OAAO,KAAK,EAAE,GAAG,IAAI,QAAQ,OAAO;AAAA,cAAiB,IAAI,OAAO,IAAI,GAAG,IAAI,OAAO,MAAM,KAAK,IAAI,OAAO,GAAG,KAAK,EAAE,KAAK,EAAE;AAAA;AAGxJ,WAAO;AAAA,EACX,SAAS,OAAO;AACZ,UAAM,IAAI,MAAM,8BAA8B,iBAAiB,QAAQ,MAAM,UAAU,eAAe,EAAE;AAAA,EAC5G;AACJ;","names":[]}